"use strict";(self.webpackChunkprotoconf=self.webpackChunkprotoconf||[]).push([[945],{1706:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>c,toc:()=>p});var t=i(4848),o=i(5680);const r={title:"Pipelining",sidebar_position:3},a=void 0,c={id:"advanced-usage/pipelining",title:"Pipelining",description:"Implementing Config Manipulation Pipelining",source:"@site/docs/advanced-usage/pipelining.mdx",sourceDirName:"advanced-usage",slug:"/advanced-usage/pipelining",permalink:"/docs/0.1.7/advanced-usage/pipelining",draft:!1,unlisted:!1,editUrl:"https://github.com/protoconf/protoconf/tree/main/website/protoconf/docs/advanced-usage/pipelining.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Pipelining",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Multiple Outputs",permalink:"/docs/0.1.7/advanced-usage/multiple-outputs"},next:{title:"Generating YAML, JSON and TOML",permalink:"/docs/0.1.7/advanced-usage/output-formats"}},s={},p=[{value:"Implementing Config Manipulation Pipelining",id:"implementing-config-manipulation-pipelining",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.RP)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"implementing-config-manipulation-pipelining",children:"Implementing Config Manipulation Pipelining"}),"\n",(0,t.jsx)(n.p,{children:"In more advanced scenarios, you may want to implement a pipeline for config manipulation, where a series of transformations are applied to a config message in a specific order. This can be useful when you have complex configuration needs that require a series of operations to be performed on a configuration."}),"\n",(0,t.jsx)(n.p,{children:"The following is an example of how you can implement config manipulation pipelining in protoconf:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:"title=./src/myproject/helpers.pinc",children:'load("//myproject/v1/server_config.proto", "ServerConfiguration")\n\ndef Chain(msg, *hooks):\n    queue = list(hooks)\n    queue.append(lambda m, _: m)\n\n    def run_next(c):\n        next = queue.pop(0)\n        return next(c, run_next)\n\n    first = queue.pop(0)\n    return first(msg, run_next)\n\ndef ServerConfigApi(*hooks):\n    return Chain(ServerConfiguration(), *hooks)\n\ndef SetMaxConnections(num):\n    def do(msg, next):\n        msg.max_connections=num\n        return next(msg)\n    return do\n\napi = struct(\n    ServerConfigApi=ServerConfigApi,\n    SetMaxConnections=SetMaxConnections,\n)\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:"title=./src/myproject/server_config.pconf",children:'load("//myproject/helpers.pinc", "api")\n\ndef main():\n    return api.ServerConfigApi(\n        api.SetMaxConnections(1000)\n    )\n'})}),"\n",(0,t.jsxs)(n.p,{children:["In this example, the ",(0,t.jsx)(n.code,{children:"helpers.pinc"})," file defines a ",(0,t.jsx)(n.code,{children:"Chain"}),' function that accepts a configuration message and a series of hooks. Each hook is a function that accepts a configuration message and a "next" function, performs some operation on the message, and then calls the next function with the modified message.']}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"ServerConfigApi"})," function creates a chain of hooks starting with a new ",(0,t.jsx)(n.code,{children:"ServerConfiguration"})," message, and the ",(0,t.jsx)(n.code,{children:"SetMaxConnections"})," function is a hook that sets the ",(0,t.jsx)(n.code,{children:"max_connections"})," field of a ",(0,t.jsx)(n.code,{children:"ServerConfiguration"})," message."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"api"})," struct packages these functions together so they can be loaded into other files."]}),"\n",(0,t.jsxs)(n.p,{children:["Then, in ",(0,t.jsx)(n.code,{children:"server_config.pconf"}),", the ",(0,t.jsx)(n.code,{children:"api"})," struct is loaded and used to create a ",(0,t.jsx)(n.code,{children:"ServerConfiguration"})," with ",(0,t.jsx)(n.code,{children:"max_connections"})," set to 1000."]}),"\n",(0,t.jsx)(n.p,{children:"This approach allows you to compose complex configurations in a clean, structured way, enhancing readability and maintainability."}),"\n",(0,t.jsx)(n.p,{children:'This technique of chaining operations is sometimes referred to as "function chaining" or "pipeline processing", and is a common pattern in functional programming. It can be especially helpful when dealing with complex or multi-step transformations.'})]})}function d(e={}){const{wrapper:n}={...(0,o.RP)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},5680:(e,n,i)=>{i.d(n,{RP:()=>p});var t=i(6540);function o(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function r(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,t)}return i}function a(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?r(Object(i),!0).forEach((function(n){o(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function c(e,n){if(null==e)return{};var i,t,o=function(e,n){if(null==e)return{};var i,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)i=r[t],n.indexOf(i)>=0||(o[i]=e[i]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)i=r[t],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(o[i]=e[i])}return o}var s=t.createContext({}),p=function(e){var n=t.useContext(s),i=n;return e&&(i="function"==typeof e?e(n):a(a({},n),e)),i},l={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var i=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=p(i),f=o,m=u["".concat(s,".").concat(f)]||u[f]||l[f]||r;return i?t.createElement(m,a(a({ref:n},d),{},{components:i})):t.createElement(m,a({ref:n},d))}));d.displayName="MDXCreateElement"}}]);