"use strict";(self.webpackChunkprotoconf=self.webpackChunkprotoconf||[]).push([[3918],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,f=u["".concat(l,".").concat(d)]||u[d]||m[d]||r;return n?o.createElement(f,i(i({ref:t},s),{},{components:n})):o.createElement(f,i({ref:t},s))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[u]="string"==typeof e?e:a,i[1]=c;for(var p=2;p<r;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7990:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>c,toc:()=>p});var o=n(7462),a=(n(7294),n(3905));const r={},i="Mutation RPC usage",c={unversionedId:"mutation-rpc",id:"mutation-rpc",title:"Mutation RPC usage",description:"One of the core principals of protoconf is the ability to mutate configs via an API (or RPC). This allows humans and machines work together on the same configuration codebase. protoconf allow humans to code the logic, while machines can only change values via the RPC.",source:"@site/docs/mutation-rpc.md",sourceDirName:".",slug:"/mutation-rpc",permalink:"/docs/mutation-rpc",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/mutation-rpc.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Protoconf integration with Terraform for managing Kubernetes resources",permalink:"/docs/integrations/terraform_kubernetes"},next:{title:"Using protoconf exec",permalink:"/docs/protoconf-exec"}},l={},p=[{value:"Create a dummy config",id:"create-a-dummy-config",level:3},{value:"Create a post-mutation script",id:"create-a-post-mutation-script",level:3},{value:"Run the mutation server in the background",id:"run-the-mutation-server-in-the-background",level:3},{value:"load the mutated values",id:"load-the-mutated-values",level:3},{value:"Next steps",id:"next-steps",level:2},{value:"Running in production",id:"running-in-production",level:3},{value:"Using gRPC",id:"using-grpc",level:3}],s={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,o.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"mutation-rpc-usage"},"Mutation RPC usage"),(0,a.kt)("p",null,"One of the core principals of ",(0,a.kt)("inlineCode",{parentName:"p"},"protoconf")," is the ability to mutate configs via an API (or RPC). This allows humans and machines work together on the same configuration codebase. ",(0,a.kt)("inlineCode",{parentName:"p"},"protoconf")," allow humans to code the logic, while machines can only change values via the RPC."),(0,a.kt)("h3",{id:"create-a-dummy-config"},"Create a dummy config"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-proto"},'// file: ./src/myservice/myconfig.proto\nsyntax = "proto3";\nmessage MyConfig {\n  string name = 1;\n  uint32 timeout = 2;\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'"""\nfile: ./src/myservice/default.pconf\n"""\nload("myconfig.proto", "MyConfig")\n\nconfig = MyConfig(name="config")\n\ndef main():\n    return config\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ protoconf compile .\n")),(0,a.kt)("h3",{id:"create-a-post-mutation-script"},"Create a post-mutation script"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ echo '#!/bin/bash\\nprotoconf compile .' > post.sh\n$ chmod +x post.sh\n")),(0,a.kt)("h3",{id:"run-the-mutation-server-in-the-background"},"Run the mutation server in the background"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ protoconf serve -post ./post.sh . &\n")),(0,a.kt)("p",null,"Now we will use the ",(0,a.kt)("inlineCode",{parentName:"p"},"protoconf mutate")," command to hit the mutation RPC"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ protoconf mutate -path myservice/mutation -proto myservice/myconfig.proto -msg MyConfig -field timeout=3\n")),(0,a.kt)("p",null,"You will now notice a new file created under ",(0,a.kt)("inlineCode",{parentName:"p"},"mutable_config")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ find mutable_config\nmutable_config\nmutable_config/myservice\nmutable_config/myservice/mutation.materialized_JSON\n")),(0,a.kt)("h3",{id:"load-the-mutated-values"},"load the mutated values"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'"""\nfile: ./src/myservice/default.pconf\n"""\nload("myconfig.proto", "MyConfig")\nload("mutable:myservice/mutation", "value")\n\nconfig = MyConfig(name="config", timeout=value.timeout)\n\ndef main():\n    return config\n')),(0,a.kt)("p",null,"Run the ",(0,a.kt)("inlineCode",{parentName:"p"},"protoconf mutate")," command again with different value and watch how your configs changes."),(0,a.kt)("h2",{id:"next-steps"},"Next steps"),(0,a.kt)("h3",{id:"running-in-production"},"Running in production"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"protoconf serve")," command accepts ",(0,a.kt)("inlineCode",{parentName:"p"},"-pre")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"-post")," scripts which should be used for preparing the ground for writing the mutation (",(0,a.kt)("inlineCode",{parentName:"p"},"-pre"),") and followup actions to run after writing the mutation (",(0,a.kt)("inlineCode",{parentName:"p"},"-post"),"). "),(0,a.kt)("p",null,"Both scripts will run by ",(0,a.kt)("inlineCode",{parentName:"p"},"protoconf serve")," on every mutation. The scripts will be receiveing a ",(0,a.kt)("inlineCode",{parentName:"p"},"metadata")," string as its first argument (",(0,a.kt)("inlineCode",{parentName:"p"},"$1")," in ",(0,a.kt)("inlineCode",{parentName:"p"},"bash"),") and can be used to pass metadata from the initiator of the rpc to the script, This can be used to pass a token for github to validate the initiator or to pass more context to be added to the commit message."),(0,a.kt)("p",null,"These scripts should handle the ",(0,a.kt)("inlineCode",{parentName:"p"},"git")," lifecycle of the mutation (setting the workspace to latest ref, and push the result after the writing done.)"),(0,a.kt)("p",null,"compiling the configs should be part of the ",(0,a.kt)("inlineCode",{parentName:"p"},"-post")," script."),(0,a.kt)("p",null,"When running in HA, you can use these scripts to acquire a lock from ",(0,a.kt)("inlineCode",{parentName:"p"},"consul"),"/",(0,a.kt)("inlineCode",{parentName:"p"},"etcd"),"."),(0,a.kt)("h3",{id:"using-grpc"},"Using gRPC"),(0,a.kt)("p",null,"The mutation proto is available ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/protoconf/protoconf/blob/v0.1.3/server/api/proto/v1/protoconf_mutation.proto"},"here"),"."))}m.isMDXComponent=!0}}]);