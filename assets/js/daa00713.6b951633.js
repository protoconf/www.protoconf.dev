"use strict";(self.webpackChunkprotoconf=self.webpackChunkprotoconf||[]).push([[30],{8081:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var t=o(4848),r=o(5680);const i={sidebar_label:"Envoy",sidebar_position:2},c="Integrating Envoy with Protoconf",a={id:"integrations/envoy",title:"Integrating Envoy with Protoconf",description:"Introduction",source:"@site/docs/integrations/envoy.mdx",sourceDirName:"integrations",slug:"/integrations/envoy",permalink:"/docs/0.1.7/integrations/envoy",draft:!1,unlisted:!1,editUrl:"https://github.com/protoconf/protoconf/tree/main/website/protoconf/docs/integrations/envoy.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"Envoy",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Terraform",permalink:"/docs/0.1.7/integrations/terraform"},next:{title:"Use Cases",permalink:"/docs/0.1.7/category/use-cases"}},s={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Step 1: Install <code>protoconf-xds</code>",id:"step-1-install-protoconf-xds",level:2},{value:"Step 2: Initialize the Workspace",id:"step-2-initialize-the-workspace",level:2},{value:"Step 3: Edit the Example File",id:"step-3-edit-the-example-file",level:2},{value:"Step 4: Compile the Configuration",id:"step-4-compile-the-configuration",level:2},{value:"Step 5: Run the Protoconf Agent",id:"step-5-run-the-protoconf-agent",level:2},{value:"Step 6: Run <code>protoconf-xds</code> Server",id:"step-6-run-protoconf-xds-server",level:2},{value:"Step 7: Create Envoy Bootstrap Config",id:"step-7-create-envoy-bootstrap-config",level:2},{value:"Step 8: Create Dockerfile",id:"step-8-create-dockerfile",level:2},{value:"Step 9: Build Docker Image",id:"step-9-build-docker-image",level:2},{value:"Step 10: Run Docker Container",id:"step-10-run-docker-container",level:2},{value:"Running in Production",id:"running-in-production",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.RP)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"integrating-envoy-with-protoconf",children:"Integrating Envoy with Protoconf"}),"\n",(0,t.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsx)(n.p,{children:"This guide aims to illustrate how you can use Protoconf to manage your Envoy configuration. Envoy Proxy is a modern, high performance, small footprint edge and service proxy which is particularly applicable in Cloud-Native applications. Envoy's configuration API, called xDS, is defined in Protobuf, making it a perfect candidate for Protoconf."}),"\n",(0,t.jsxs)(n.p,{children:["Our setup will involve running a ",(0,t.jsx)(n.code,{children:"protoconf-xds"})," server that will serve the Envoy configurations. In a nutshell, Protoconf will generate the xDS snapshot that ",(0,t.jsx)(n.code,{children:"protoconf-xds"})," will serve to Envoy, updating its configuration."]}),"\n",(0,t.jsx)(n.p,{children:"Below is a step-by-step guide on how to integrate Envoy with Protoconf:"}),"\n",(0,t.jsxs)(n.h2,{id:"step-1-install-protoconf-xds",children:["Step 1: Install ",(0,t.jsx)(n.code,{children:"protoconf-xds"})]}),"\n",(0,t.jsxs)(n.p,{children:["You can install ",(0,t.jsx)(n.code,{children:"protoconf-xds"})," via brew using the command:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"brew install protoconf/tap/protoconf-xds\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Alternatively, you can download it from the ",(0,t.jsx)(n.a,{href:"https://github.com/protoconf/protoconf-xds/releases",children:"github releases page"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"step-2-initialize-the-workspace",children:"Step 2: Initialize the Workspace"}),"\n",(0,t.jsx)(n.p,{children:"Run the command below to initialize the workspace with all required proto files:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"protoconf-xds init\n"})}),"\n",(0,t.jsx)(n.p,{children:"This command will create a directory structure for your project and will download all the necessary protobuf definitions."}),"\n",(0,t.jsx)(n.h2,{id:"step-3-edit-the-example-file",children:"Step 3: Edit the Example File"}),"\n",(0,t.jsxs)(n.p,{children:["Find the example configuration file at ",(0,t.jsx)(n.code,{children:"./src/example/envoy.mpconf"}),". This file is written in the Starlark configuration language and defines your Envoy configuration. Make the necessary modifications to fit your use-case."]}),"\n",(0,t.jsx)(n.h2,{id:"step-4-compile-the-configuration",children:"Step 4: Compile the Configuration"}),"\n",(0,t.jsx)(n.p,{children:"Compile the configuration by running the command below:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"protoconf compile .\n"})}),"\n",(0,t.jsxs)(n.p,{children:["It will create a new configuration with the path ",(0,t.jsx)(n.code,{children:"example/envoy/test-id"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"step-5-run-the-protoconf-agent",children:"Step 5: Run the Protoconf Agent"}),"\n",(0,t.jsx)(n.p,{children:"To generate an xDS snapshot and serve it to Envoy, you'll need to run the Protoconf agent in development mode:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"protoconf agent --dev\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"step-6-run-protoconf-xds-server",children:["Step 6: Run ",(0,t.jsx)(n.code,{children:"protoconf-xds"})," Server"]}),"\n",(0,t.jsxs)(n.p,{children:["Run ",(0,t.jsx)(n.code,{children:"protoconf-xds serve"})," with ",(0,t.jsx)(n.code,{children:"-prefix=example/envoy"})," and ",(0,t.jsx)(n.code,{children:"-nodeId=test-id"}),". Note that ",(0,t.jsx)(n.code,{children:"-nodeId"})," is repeatable and you can add as many node ids as you wish. The combination of ",(0,t.jsx)(n.code,{children:"prefix"})," and ",(0,t.jsx)(n.code,{children:"node"})," id will result in ",(0,t.jsx)(n.code,{children:"example/envoy/test-id"}),", which is the same as our protoconf config."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"protoconf-xds serve -prefix=example/envoy -nodeId=test-id\n"})}),"\n",(0,t.jsx)(n.h2,{id:"step-7-create-envoy-bootstrap-config",children:"Step 7: Create Envoy Bootstrap Config"}),"\n",(0,t.jsxs)(n.p,{children:["Create a new Envoy bootstrap configuration file. This config assumes Envoy will run in a Docker container, and that the ",(0,t.jsx)(n.code,{children:"protoconf-xds"})," server runs on the host machine listening to port 18000. You can change the host address in the config file. Also, you can change the ",(0,t.jsx)(n.code,{children:"node.id"})," which, in this case, is set to ",(0,t.jsx)(n.code,{children:"test-id"})," so our xDS server will know which configuration to serve."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://github.com/protoconf/protoconf-xds/blob/main/envoy.yaml",children:"Here is the bootstrap config"})}),"\n",(0,t.jsx)(n.h2,{id:"step-8-create-dockerfile",children:"Step 8: Create Dockerfile"}),"\n",(0,t.jsx)(n.p,{children:"Create a Dockerfile to generate a Docker container with Envoy and our new bootstrap config. Here's an example Dockerfile:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-Dockerfile",children:"FROM envoyproxy/envoy:latest\nCOPY envoy.yaml /etc/envoy/envoy.yaml\nRUN chmod go+r /etc/envoy/envoy.yaml\n"})}),"\n",(0,t.jsx)(n.h2,{id:"step-9-build-docker-image",children:"Step 9: Build Docker Image"}),"\n",(0,t.jsx)(n.p,{children:"Build the Docker image using the following command:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker build -t envoy:v1 .\n"})}),"\n",(0,t.jsx)(n.h2,{id:"step-10-run-docker-container",children:"Step 10: Run Docker Container"}),"\n",(0,t.jsx)(n.p,{children:"Run the Docker container using the following command:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker run -p\n\n19000:19000 -p 10000:10000 envoy:v1\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You can then navigate to Envoy's admin page at ",(0,t.jsx)(n.code,{children:"http://localhost:19000"})," and see the configuration of the clusters. If you change the cluster name in the example file, run ",(0,t.jsx)(n.code,{children:"protoconf compile ."}),", and reload the page, you'll see the new cluster name."]}),"\n",(0,t.jsx)(n.h2,{id:"running-in-production",children:"Running in Production"}),"\n",(0,t.jsxs)(n.p,{children:["For production environments, Docker images are provided via ",(0,t.jsx)(n.code,{children:"protoconf/protoconf-xds"})," or ",(0,t.jsx)(n.code,{children:"ghcr.io/protoconf/protoconf-xds"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Remember to switch the Protoconf agent to production mode when you're ready to move your configuration out of the development environment."})]})}function p(e={}){const{wrapper:n}={...(0,r.RP)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},5680:(e,n,o)=>{o.d(n,{RP:()=>l});var t=o(6540);function r(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function i(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,t)}return o}function c(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?i(Object(o),!0).forEach((function(n){r(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function a(e,n){if(null==e)return{};var o,t,r=function(e,n){if(null==e)return{};var o,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)o=i[t],n.indexOf(o)>=0||(r[o]=e[o]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)o=i[t],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var s=t.createContext({}),l=function(e){var n=t.useContext(s),o=n;return e&&(o="function"==typeof e?e(n):c(c({},n),e)),o},d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var o=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),h=l(o),u=r,f=h["".concat(s,".").concat(u)]||h[u]||d[u]||i;return o?t.createElement(f,c(c({ref:n},p),{},{components:o})):t.createElement(f,c({ref:n},p))}));p.displayName="MDXCreateElement"}}]);