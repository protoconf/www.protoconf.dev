"use strict";(self.webpackChunkprotoconf=self.webpackChunkprotoconf||[]).push([[6577],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},s="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),s=p(n),d=o,m=s["".concat(l,".").concat(d)]||s[d]||f[d]||i;return n?r.createElement(m,a(a({ref:t},c),{},{components:n})):r.createElement(m,a({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var u={};for(var l in t)hasOwnProperty.call(t,l)&&(u[l]=t[l]);u.originalType=e,u[s]="string"==typeof e?e:o,a[1]=u;for(var p=2;p<i;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7735:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>f,frontMatter:()=>i,metadata:()=>u,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const i={title:"Multiple Outputs",sidebar_position:2},a=void 0,u={unversionedId:"advanced-usage/multiple-outputs",id:"advanced-usage/multiple-outputs",title:"Multiple Outputs",description:"Generating Multiple Config Outputs",source:"@site/docs/advanced-usage/multiple-outputs.mdx",sourceDirName:"advanced-usage",slug:"/advanced-usage/multiple-outputs",permalink:"/docs/0.1.7/advanced-usage/multiple-outputs",draft:!1,editUrl:"https://github.com/protoconf/protoconf/tree/main/website/protoconf/docs/advanced-usage/multiple-outputs.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Multiple Outputs",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Code Reuse",permalink:"/docs/0.1.7/advanced-usage/code-reuse"},next:{title:"Pipelining",permalink:"/docs/0.1.7/advanced-usage/pipelining"}},l={},p=[{value:"Generating Multiple Config Outputs",id:"generating-multiple-config-outputs",level:2}],c={toc:p},s="wrapper";function f(e){let{components:t,...n}=e;return(0,o.kt)(s,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"generating-multiple-config-outputs"},"Generating Multiple Config Outputs"),(0,o.kt)("p",null,"protoconf allows for the generation of multiple config outputs from a single Starlark file. This is particularly useful when you have variations of configuration for different environments or use cases."),(0,o.kt)("p",null,"To use this feature, you should use the ",(0,o.kt)("inlineCode",{parentName:"p"},".mpconf")," extension for your Starlark file. Then, you can return a dictionary from your ",(0,o.kt)("inlineCode",{parentName:"p"},"main")," function, where each key-value pair represents a different configuration output. Here's an example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title=./src/myproject/server_config.mpconf",title:"./src/myproject/server_config.mpconf"},'load("//myproject/v1/server_config.proto", "ServerConfiguration")\nload("//myproject/helpers.pinc", "create_default_config")\n\ndef main():\n    return {\n        "default": create_default_config(),\n        "debug": create_default_config(max_connections=1000, request_timeout=Duration(seconds=5)),\n    }\n')),(0,o.kt)("p",null,"In this example, the ",(0,o.kt)("inlineCode",{parentName:"p"},"main")," function returns a dictionary with two configurations: ",(0,o.kt)("inlineCode",{parentName:"p"},"default")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"debug"),". The ",(0,o.kt)("inlineCode",{parentName:"p"},"default")," configuration uses the ",(0,o.kt)("inlineCode",{parentName:"p"},"create_default_config")," function defined in ",(0,o.kt)("inlineCode",{parentName:"p"},"helpers.pinc")," to create a ",(0,o.kt)("inlineCode",{parentName:"p"},"ServerConfiguration")," with default values."),(0,o.kt)("p",null,"For the ",(0,o.kt)("inlineCode",{parentName:"p"},"debug")," configuration, the ",(0,o.kt)("inlineCode",{parentName:"p"},"create_default_config")," function is called with arguments to override the ",(0,o.kt)("inlineCode",{parentName:"p"},"max_connections")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"request_timeout")," values."),(0,o.kt)("p",null,"When you compile this file with protoconf, it will generate two separate output files: ",(0,o.kt)("inlineCode",{parentName:"p"},"./materialized_configs/myproject/server_config/default.materialized_JSON")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"./materialized_configs/myproject/server_config/debug.materialized_JSON"),"."),(0,o.kt)("p",null,"These configurations can then be consumed from the protoconf agent at ",(0,o.kt)("inlineCode",{parentName:"p"},"myproject/server_config/default")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"myproject/server_config/debug")," respectively."),(0,o.kt)("p",null,"By using this method, you can easily manage different configurations from a single source file, enhancing the maintainability and readability of your configurations."),(0,o.kt)("p",null,"This approach allows you to cleanly separate configurations for different environments or use cases, while keeping the related configuration code in a single place."))}f.isMDXComponent=!0}}]);