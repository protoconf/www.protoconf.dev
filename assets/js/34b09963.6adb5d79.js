"use strict";(self.webpackChunkprotoconf=self.webpackChunkprotoconf||[]).push([[313],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),l=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=l(e.components);return o.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=l(n),d=r,f=p["".concat(s,".").concat(d)]||p[d]||m[d]||i;return n?o.createElement(f,a(a({ref:t},u),{},{components:n})):o.createElement(f,a({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[p]="string"==typeof e?e:r,a[1]=c;for(var l=2;l<i;l++)a[l]=n[l];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6680:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var o=n(7462),r=(n(7294),n(3905));const i={sidebar_position:1},a="Protoconf Mutation CLI",c={unversionedId:"advanced-usage/mutation-service/mutation-cli",id:"advanced-usage/mutation-service/mutation-cli",title:"Protoconf Mutation CLI",description:"The protoconf mutate command is a CLI utility that simplifies communication with the mutation server.",source:"@site/docs/advanced-usage/mutation-service/mutation-cli.mdx",sourceDirName:"advanced-usage/mutation-service",slug:"/advanced-usage/mutation-service/mutation-cli",permalink:"/docs/advanced-usage/mutation-service/mutation-cli",draft:!1,editUrl:"https://github.com/protoconf/protoconf/tree/main/website/protoconf/docs/advanced-usage/mutation-service/mutation-cli.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Protoconf Mutation Service",permalink:"/docs/advanced-usage/mutation-service/"},next:{title:"Using gRPC",permalink:"/docs/advanced-usage/mutation-service/grpc"}},s={},l=[],u={toc:l},p="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"protoconf-mutation-cli"},"Protoconf Mutation CLI"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"protoconf mutate")," command is a CLI utility that simplifies communication with the mutation server."),(0,r.kt)("p",null,"Here are the available flags for the ",(0,r.kt)("inlineCode",{parentName:"p"},"protoconf mutate")," command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'Usage: [OPTION]...\n\nWrite to mutation server\nUsage: [OPTION]...\n\nA CLI util to communicate with the mutation server easily.\n\n  -addr string\n        Server address (default "localhost:4301")\n  -field value\n        fields to set inside -msg\n  -metadata string\n        Metadata string to pass to the pre/post install script\n  -msg string\n        Name of the message inside the -proto file\n  -path string\n        Path to put the config in\n  -proto string\n        Path to the proto file\n  -root string\n        The root of protoconf src. (default "./src")\n')),(0,r.kt)("p",null,"This command is designed for simple mutations, and it will only work with simple message types, i.e., no nested messages or enums. Note that the command requires access to the proto file definition, or it can use precompiled files like ",(0,r.kt)("inlineCode",{parentName:"p"},"google/protobuf/struct.proto"),"."),(0,r.kt)("p",null,"By using this command, you can easily update configurations directly from the command line, without needing to manually interact with the mutation server's API."),(0,r.kt)("p",null,"Here is an example usage of the ",(0,r.kt)("inlineCode",{parentName:"p"},"protoconf mutate")," command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"protoconf mutate -proto myproject/v1/server_config.proto \\\n    -msg ServerConfiguration \\\n    -field max_connections=1000 \\\n    -field enable_logging=false \\\n    -path demo/inputs/demo_server\n")),(0,r.kt)("p",null,"This command will work if you're running it from the root directory of your protoconf project. If you're running it from a different location, you can provide the path to your ",(0,r.kt)("inlineCode",{parentName:"p"},"./src")," directory using the ",(0,r.kt)("inlineCode",{parentName:"p"},"-root")," flag."))}m.isMDXComponent=!0}}]);