"use strict";(self.webpackChunkprotoconf=self.webpackChunkprotoconf||[]).push([[6577],{8312:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>c,toc:()=>u});var r=n(5893),o=n(3905);const i={title:"Multiple Outputs",sidebar_position:2},a=void 0,c={id:"advanced-usage/multiple-outputs",title:"Multiple Outputs",description:"Generating Multiple Config Outputs",source:"@site/docs/advanced-usage/multiple-outputs.mdx",sourceDirName:"advanced-usage",slug:"/advanced-usage/multiple-outputs",permalink:"/docs/0.1.7/advanced-usage/multiple-outputs",draft:!1,unlisted:!1,editUrl:"https://github.com/protoconf/protoconf/tree/main/website/protoconf/docs/advanced-usage/multiple-outputs.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Multiple Outputs",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Code Reuse",permalink:"/docs/0.1.7/advanced-usage/code-reuse"},next:{title:"Pipelining",permalink:"/docs/0.1.7/advanced-usage/pipelining"}},s={},u=[{value:"Generating Multiple Config Outputs",id:"generating-multiple-config-outputs",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.ah)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"generating-multiple-config-outputs",children:"Generating Multiple Config Outputs"}),"\n",(0,r.jsx)(t.p,{children:"protoconf allows for the generation of multiple config outputs from a single Starlark file. This is particularly useful when you have variations of configuration for different environments or use cases."}),"\n",(0,r.jsxs)(t.p,{children:["To use this feature, you should use the ",(0,r.jsx)(t.code,{children:".mpconf"})," extension for your Starlark file. Then, you can return a dictionary from your ",(0,r.jsx)(t.code,{children:"main"})," function, where each key-value pair represents a different configuration output. Here's an example:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",metastring:"title=./src/myproject/server_config.mpconf",children:'load("//myproject/v1/server_config.proto", "ServerConfiguration")\nload("//myproject/helpers.pinc", "create_default_config")\n\ndef main():\n    return {\n        "default": create_default_config(),\n        "debug": create_default_config(max_connections=1000, request_timeout=Duration(seconds=5)),\n    }\n'})}),"\n",(0,r.jsxs)(t.p,{children:["In this example, the ",(0,r.jsx)(t.code,{children:"main"})," function returns a dictionary with two configurations: ",(0,r.jsx)(t.code,{children:"default"})," and ",(0,r.jsx)(t.code,{children:"debug"}),". The ",(0,r.jsx)(t.code,{children:"default"})," configuration uses the ",(0,r.jsx)(t.code,{children:"create_default_config"})," function defined in ",(0,r.jsx)(t.code,{children:"helpers.pinc"})," to create a ",(0,r.jsx)(t.code,{children:"ServerConfiguration"})," with default values."]}),"\n",(0,r.jsxs)(t.p,{children:["For the ",(0,r.jsx)(t.code,{children:"debug"})," configuration, the ",(0,r.jsx)(t.code,{children:"create_default_config"})," function is called with arguments to override the ",(0,r.jsx)(t.code,{children:"max_connections"})," and ",(0,r.jsx)(t.code,{children:"request_timeout"})," values."]}),"\n",(0,r.jsxs)(t.p,{children:["When you compile this file with protoconf, it will generate two separate output files: ",(0,r.jsx)(t.code,{children:"./materialized_configs/myproject/server_config/default.materialized_JSON"})," and ",(0,r.jsx)(t.code,{children:"./materialized_configs/myproject/server_config/debug.materialized_JSON"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["These configurations can then be consumed from the protoconf agent at ",(0,r.jsx)(t.code,{children:"myproject/server_config/default"})," and ",(0,r.jsx)(t.code,{children:"myproject/server_config/debug"})," respectively."]}),"\n",(0,r.jsx)(t.p,{children:"By using this method, you can easily manage different configurations from a single source file, enhancing the maintainability and readability of your configurations."}),"\n",(0,r.jsx)(t.p,{children:"This approach allows you to cleanly separate configurations for different environments or use cases, while keeping the related configuration code in a single place."})]})}function d(e={}){const{wrapper:t}={...(0,o.ah)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},3905:(e,t,n)=>{n.d(t,{ah:()=>u});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=u(n),f=o,g=p["".concat(s,".").concat(f)]||p[f]||l[f]||i;return n?r.createElement(g,a(a({ref:t},d),{},{components:n})):r.createElement(g,a({ref:t},d))}));d.displayName="MDXCreateElement"}}]);