"use strict";(self.webpackChunkprotoconf=self.webpackChunkprotoconf||[]).push([[34],{3905:(e,r,n)=>{n.d(r,{Zo:()=>p,kt:()=>d});var t=n(7294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function a(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function s(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?a(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function i(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=t.createContext({}),l=function(e){var r=t.useContext(c),n=r;return e&&(n="function"==typeof e?e(r):s(s({},r),e)),n},p=function(e){var r=l(e.components);return t.createElement(c.Provider,{value:r},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},f=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(n),f=o,d=u["".concat(c,".").concat(f)]||u[f]||m[f]||a;return n?t.createElement(d,s(s({ref:r},p),{},{components:n})):t.createElement(d,s({ref:r},p))}));function d(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=f;var i={};for(var c in r)hasOwnProperty.call(r,c)&&(i[c]=r[c]);i.originalType=e,i[u]="string"==typeof e?e:o,s[1]=i;for(var l=2;l<a;l++)s[l]=n[l];return t.createElement.apply(null,s)}return t.createElement.apply(null,n)}f.displayName="MDXCreateElement"},4181:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var t=n(7462),o=(n(7294),n(3905));const a={},s="Protoconf integration with Terraform for managing Kubernetes resources",i={unversionedId:"integrations/terraform_kubernetes",id:"integrations/terraform_kubernetes",title:"Protoconf integration with Terraform for managing Kubernetes resources",description:"Prerequisites",source:"@site/docs/integrations/terraform_kubernetes.md",sourceDirName:"integrations",slug:"/integrations/terraform_kubernetes",permalink:"/docs/integrations/terraform_kubernetes",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/integrations/terraform_kubernetes.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Protoconf integration with Terraform",permalink:"/docs/integrations/terraform"},next:{title:"Mutation RPC usage",permalink:"/docs/mutation-rpc"}},c={},l=[{value:"Prerequisites",id:"prerequisites",level:3},{value:"Prepare",id:"prepare",level:3},{value:"Initialize Terraform",id:"initialize-terraform",level:3},{value:"Generate the terraform protos",id:"generate-the-terraform-protos",level:3},{value:"Create directory for the Starlark configuration file (.pconf)",id:"create-directory-for-the-starlark-configuration-file-pconf",level:3},{value:"Create the Starlark configuration file (.pconf)",id:"create-the-starlark-configuration-file-pconf",level:3},{value:"Compile the config",id:"compile-the-config",level:3},{value:"Check the json output",id:"check-the-json-output",level:3},{value:"Prepare to run Terraform",id:"prepare-to-run-terraform",level:2},{value:"Create Terraform working directory",id:"create-terraform-working-directory",level:3},{value:"Process json required by Terraform",id:"process-json-required-by-terraform",level:3},{value:"Check the json required by Terraform",id:"check-the-json-required-by-terraform",level:3},{value:"Run Terraform init",id:"run-terraform-init",level:3},{value:"Run Terraform plan",id:"run-terraform-plan",level:3},{value:"Run Terraform apply",id:"run-terraform-apply",level:3}],p={toc:l},u="wrapper";function m(e){let{components:r,...n}=e;return(0,o.kt)(u,(0,t.Z)({},p,n,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"protoconf-integration-with-terraform-for-managing-kubernetes-resources"},"Protoconf integration with Terraform for managing Kubernetes resources"),(0,o.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"terraform")," binary in your ",(0,o.kt)("inlineCode",{parentName:"li"},"$PATH")),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"protoconf")," binary in your ",(0,o.kt)("inlineCode",{parentName:"li"},"$PATH"))),(0,o.kt)("h3",{id:"prepare"},"Prepare"),(0,o.kt)("p",null,"Create a ",(0,o.kt)("inlineCode",{parentName:"p"},"providers.tf")," file containing the providers declarations you need."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hcl"},'provider "kubernetes" {}\n')),(0,o.kt)("h3",{id:"initialize-terraform"},"Initialize Terraform"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ terraform init\n")),(0,o.kt)("h3",{id:"generate-the-terraform-protos"},"Generate the terraform protos"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ protoconf import terraform\n")),(0,o.kt)("p",null,"Validate the outpus"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ find src/terraform\nsrc/terraform\nsrc/terraform/v1\nsrc/terraform/v1/terraform.proto\nsrc/terraform/v1/meta.proto\nsrc/terraform/kubernetes\nsrc/terraform/kubernetes/datasources\nsrc/terraform/kubernetes/datasources/v2\nsrc/terraform/kubernetes/datasources/v2/namespace.proto\nsrc/terraform/kubernetes/datasources/v2/all.proto\nsrc/terraform/kubernetes/datasources/v2/persistent.proto\nsrc/terraform/kubernetes/datasources/v2/storage.proto\nsrc/terraform/kubernetes/datasources/v2/service.proto\nsrc/terraform/kubernetes/datasources/v2/ingress.proto\nsrc/terraform/kubernetes/datasources/v2/config.proto\nsrc/terraform/kubernetes/datasources/v2/pod.proto\nsrc/terraform/kubernetes/datasources/v2/secret.proto\nsrc/terraform/kubernetes/resources\nsrc/terraform/kubernetes/resources/v2\nsrc/terraform/kubernetes/resources/v2/mutating.proto\nsrc/terraform/kubernetes/resources/v2/priority.proto\nsrc/terraform/kubernetes/resources/v2/namespace.proto\nsrc/terraform/kubernetes/resources/v2/validating.proto\nsrc/terraform/kubernetes/resources/v2/stateful.proto\nsrc/terraform/kubernetes/resources/v2/manifest.proto\nsrc/terraform/kubernetes/resources/v2/cluster.proto\nsrc/terraform/kubernetes/resources/v2/api.proto\nsrc/terraform/kubernetes/resources/v2/job.proto\nsrc/terraform/kubernetes/resources/v2/persistent.proto\nsrc/terraform/kubernetes/resources/v2/daemonset.proto\nsrc/terraform/kubernetes/resources/v2/cron.proto\nsrc/terraform/kubernetes/resources/v2/role.proto\nsrc/terraform/kubernetes/resources/v2/deployment.proto\nsrc/terraform/kubernetes/resources/v2/storage.proto\nsrc/terraform/kubernetes/resources/v2/csi.proto\nsrc/terraform/kubernetes/resources/v2/endpoints.proto\nsrc/terraform/kubernetes/resources/v2/service.proto\nsrc/terraform/kubernetes/resources/v2/ingress.proto\nsrc/terraform/kubernetes/resources/v2/default.proto\nsrc/terraform/kubernetes/resources/v2/certificate.proto\nsrc/terraform/kubernetes/resources/v2/replication.proto\nsrc/terraform/kubernetes/resources/v2/limit.proto\nsrc/terraform/kubernetes/resources/v2/horizontal.proto\nsrc/terraform/kubernetes/resources/v2/resource.proto\nsrc/terraform/kubernetes/resources/v2/network.proto\nsrc/terraform/kubernetes/resources/v2/config.proto\nsrc/terraform/kubernetes/resources/v2/daemon.proto\nsrc/terraform/kubernetes/resources/v2/pod.proto\nsrc/terraform/kubernetes/resources/v2/secret.proto\nsrc/terraform/kubernetes/provider\nsrc/terraform/kubernetes/provider/v2\nsrc/terraform/kubernetes/provider/v2/kubernetes.proto\n")),(0,o.kt)("h3",{id:"create-directory-for-the-starlark-configuration-file-pconf"},"Create directory for the Starlark configuration file (.pconf)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ mkdir src/proto-kube/\n")),(0,o.kt)("h3",{id:"create-the-starlark-configuration-file-pconf"},"Create the Starlark configuration file (.pconf)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# vim: filetype=python\n# ./src/proto-kube/kube-pod.pconf\n\nload("//terraform/v1/terraform.proto", "Terraform")\nload("//terraform/kubernetes/provider/v2/kubernetes.proto", "Kubernetes")\nload("//terraform/kubernetes/resources/v2/pod.proto", "KubernetesPod")\n\ntf = Terraform(\n    provider=Terraform.Providers(\n        kubernetes=[Kubernetes(config_path="/path/to/kubeconfig")]\n    ),\n    resource=Terraform.Resources(),\n    output={},\n)\n\n\nname = KubernetesPod.Metadata(name="example-pod")\nspec = KubernetesPod.Spec(\n    container=[KubernetesPod.Spec.Container(\n        name="test-container",\n        image="centos/tools",\n        command=["/bin/bash", "-c", "sleep 2000000000000"],\n    )]\n)\n\ntf.resource.kubernetes_pod["my_pod"] = KubernetesPod(metadata=name, spec=spec)\n\n\ndef main():\n    return tf\n')),(0,o.kt)("h3",{id:"compile-the-config"},"Compile the config"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ protoconf compile .\n")),(0,o.kt)("h3",{id:"check-the-json-output"},"Check the json output"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cat materialized_config/proto-kube/kube-pod.materialized_JSON\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "protoFile": "terraform/terraform.proto",\n  "value": {\n    "@type": "type.googleapis.com/terraform.Terraform",\n    "provider": {\n      "kubernetes": [\n        {\n          "config_path": "/path/to/kubeconfig"\n        }\n      ]\n    },\n    "resource": {\n      "kubernetes_pod": {\n        "my_pod": {\n          "metadata": {\n            "name": "example-pod"\n          },\n          "spec": {\n            "container": {\n              "command": ["/bin/bash", "-c", "sleep 2000000000000"],\n              "image": "centos/tools",\n              "name": "test-container"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n')),(0,o.kt)("h2",{id:"prepare-to-run-terraform"},"Prepare to run Terraform"),(0,o.kt)("h3",{id:"create-terraform-working-directory"},"Create Terraform working directory"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ mkdir tf\n")),(0,o.kt)("h3",{id:"process-json-required-by-terraform"},"Process json required by Terraform"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ cat materialized_config/proto-kube/kube-pod.materialized_JSON | \\\n      jq '.value | del(.[\"@type\"])' > tf/proto-kube.tf.json\n")),(0,o.kt)("h3",{id:"check-the-json-required-by-terraform"},"Check the json required by Terraform"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'$ cat tf/proto-kube.tf.json\n{\n  "provider": {\n    "kubernetes": [\n      {\n        "config_path": "./kubeconfig"\n      }\n    ]\n  },\n  "resource": {\n    "kubernetes_pod": {\n      "my_pod": {\n        "metadata": {\n          "name": "example-pod"\n        },\n        "spec": {\n          "container": {\n            "command": [\n              "/bin/bash",\n              "-c",\n              "sleep 2000000000000"\n            ],\n            "image": "centos/tools",\n            "name": "test-container"\n          }\n        }\n      }\n    }\n  }\n}\n\n')),(0,o.kt)("h3",{id:"run-terraform-init"},"Run Terraform init"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'$ cd tf\n~/tf $ terraform init\n\nInitializing the backend...\n\nInitializing provider plugins...\n- Finding latest version of hashicorp/kubernetes...\n- Installing hashicorp/kubernetes v2.3.2...\n- Installed hashicorp/kubernetes v2.3.2 (signed by HashiCorp)\n\nTerraform has created a lock file .terraform.lock.hcl to record the provider\nselections it made above. Include this file in your version control repository\nso that Terraform can guarantee to make the same selections by default when\nyou run "terraform init" in the future.\n\nTerraform has been successfully initialized!\n\nYou may now begin working with Terraform. Try running "terraform plan" to see\nany changes that are required for your infrastructure. All Terraform commands\nshould now work.\n\nIf you ever set or change modules or backend configuration for Terraform,\nrerun this command to reinitialize your working directory. If you forget, other\ncommands will detect it and remind you to do so if necessary.\n\n')),(0,o.kt)("h3",{id:"run-terraform-plan"},"Run Terraform plan"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"~/tf $ terraform plan\nTerraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:\n  + create\n[ ... ]\nPlan: 1 to add, 0 to change, 0 to destroy.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n")),(0,o.kt)("h3",{id:"run-terraform-apply"},"Run Terraform apply"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'~/tf $ terraform apply -auto-approve\n\nTerraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:\n  + create\n\nTerraform will perform the following actions:\n\n  # kubernetes_pod.my_pod will be created\n  + resource "kubernetes_pod" "my_pod" {\n      + id = (known after apply)\n\n      + metadata {\n          + generation       = (known after apply)\n          + name             = "example-pod"\n          + namespace        = "default"\n          + resource_version = (known after apply)\n          + uid              = (known after apply)\n        }\n\n      + spec {\n          + automount_service_account_token  = true\n          + dns_policy                       = "ClusterFirst"\n          + enable_service_links             = true\n          + host_ipc                         = false\n          + host_network                     = false\n          + host_pid                         = false\n          + hostname                         = (known after apply)\n          + node_name                        = (known after apply)\n          + restart_policy                   = "Always"\n          + service_account_name             = (known after apply)\n          + share_process_namespace          = false\n          + termination_grace_period_seconds = 30\n\n          + container {\n              + command                    = [\n                  + "/bin/bash",\n                  + "-c",\n                  + "sleep 2000000000000",\n                ]\n              + image                      = "centos/tools"\n              + image_pull_policy          = (known after apply)\n              + name                       = "test-container"\n              + stdin                      = false\n              + stdin_once                 = false\n              + termination_message_path   = "/dev/termination-log"\n              + termination_message_policy = (known after apply)\n              + tty                        = false\n\n              + resources {\n                  + limits   = (known after apply)\n                  + requests = (known after apply)\n                }\n            }\n\n[ ... ]\n\nPlan: 1 to add, 0 to change, 0 to destroy.\nkubernetes_pod.my_pod: Creating...\nkubernetes_pod.my_pod: Still creating... [10s elapsed]\nkubernetes_pod.my_pod: Still creating... [20s elapsed]\nkubernetes_pod.my_pod: Still creating... [30s elapsed]\nkubernetes_pod.my_pod: Still creating... [40s elapsed]\nkubernetes_pod.my_pod: Still creating... [50s elapsed]\nkubernetes_pod.my_pod: Still creating... [1m0s elapsed]\nkubernetes_pod.my_pod: Still creating... [1m10s elapsed]\nkubernetes_pod.my_pod: Still creating... [1m20s elapsed]\nkubernetes_pod.my_pod: Still creating... [1m30s elapsed]\nkubernetes_pod.my_pod: Creation complete after 1m34s [id=default/example-pod]\n\nApply complete! Resources: 1 added, 0 changed, 0 destroyed.\n')))}m.isMDXComponent=!0}}]);