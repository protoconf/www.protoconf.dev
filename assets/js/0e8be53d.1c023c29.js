"use strict";(self.webpackChunkprotoconf=self.webpackChunkprotoconf||[]).push([[2],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(n),d=o,f=c["".concat(p,".").concat(d)]||c[d]||m[d]||a;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4870:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:1},i="Terraform",l={unversionedId:"integrations/terraform",id:"integrations/terraform",title:"Terraform",description:"Installation and Initialization",source:"@site/docs/integrations/terraform.md",sourceDirName:"integrations",slug:"/integrations/terraform",permalink:"/docs/0.1.7/integrations/terraform",draft:!1,editUrl:"https://github.com/protoconf/protoconf/tree/main/website/protoconf/docs/integrations/terraform.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Integrations",permalink:"/docs/0.1.7/category/integrations"},next:{title:"Envoy",permalink:"/docs/0.1.7/integrations/envoy"}},p={},s=[{value:"Installation and Initialization",id:"installation-and-initialization",level:2},{value:"Generation",id:"generation",level:2},{value:"Usage",id:"usage",level:2},{value:"Exporting Configurations",id:"exporting-configurations",level:2},{value:"External tools",id:"external-tools",level:3},{value:"Watch for Configs",id:"watch-for-configs",level:3},{value:"Docker Deployment",id:"docker-deployment",level:4}],u={toc:s},c="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"terraform"},"Terraform"),(0,o.kt)("h2",{id:"installation-and-initialization"},"Installation and Initialization"),(0,o.kt)("p",null,"First, install ",(0,o.kt)("inlineCode",{parentName:"p"},"protoconf-terraform")," using Homebrew:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"brew install protoconf/tap/protoconf-terraform\n")),(0,o.kt)("p",null,"Alternatively, download it from the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/protoconf/protoconf-terraform"},"Github repository"),"."),(0,o.kt)("p",null,"Next, initialize the workspace:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"protoconf-terraform init\n")),(0,o.kt)("p",null,"Create a ",(0,o.kt)("inlineCode",{parentName:"p"},"provider.tf")," file and include the providers you want to use:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'provider "tls" {}\nprovider "null" {}\nprovider "random" {}\n')),(0,o.kt)("p",null,"Then, initialize Terraform:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"terraform init\n")),(0,o.kt)("p",null,"This command downloads all the necessary providers to the local cache."),(0,o.kt)("h2",{id:"generation"},"Generation"),(0,o.kt)("p",null,"Next, generate the provider schemas:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"protoconf-terraform generate\n")),(0,o.kt)("p",null,"This command connects to the providers, fetches their schemas, writes the schemas into protobuf files, and updates ",(0,o.kt)("inlineCode",{parentName:"p"},"./src/terraform/v1/terraform.proto")," to link these files."),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"Here's an example of how to use the API:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'load("//terraform/v1/util.pinc", "util")\nload("//terraform/random/provider/v3/random.proto", "Random")\nload("//terraform/random/resources/v3/pet.proto", "RandomPet")\nload("//terraform/null/provider/v3/null.proto", "Null")\nload("//terraform/null/datasources/v3/data.proto", "NullDataSource")\n\ntf = util.Terraform(\n    util.Provider(Random()),\n    util.Resource(\n        "dog",\n        RandomPet(),\n        lambda dog: util.Output(\n            "dog_name", dog.id\n        ),\n    ),\n    util.Data(\n        "null_name",\n        NullDataSource(),\n        lambda data: util.Group(\n            util.Output("null_random", data.random),\n            util.Output("has_computed_default", data.has_computed_default),\n        ),\n    ),\n    util.Module(\n        "ssh_key",\n        source="JamesWoolfenden/key/tls",\n        version="0.0.6",\n        out_dir="/tmp/sshkey",\n        then=lambda output: util.Group(\n            util.Output("public_key", output("public_key")),\n        ),\n    ),\n)\n')),(0,o.kt)("p",null,"Here's how to interpret the different parts of the example:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"util.Terraform"),": Initializes a new Terraform configuration."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"util.Provider(Random())"),': Adds a provider configuration for the "random" provider.'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"util.Resource"),': Creates a new resource of type "random_pet" with the identifier "dog".'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"util.Data"),': Creates a new data source of type "null_data_source" with the identifier "null_name".'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"util.Module"),': Adds a module with the identifier "ssh_key".')),(0,o.kt)("h2",{id:"exporting-configurations"},"Exporting Configurations"),(0,o.kt)("p",null,"After creating the ",(0,o.kt)("inlineCode",{parentName:"p"},"tf")," Terraform object, there are two ways to export the configurations:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Use external tools like Terraform Cloud, Atlantis, env0 or Spacelift"),(0,o.kt)("li",{parentName:"ol"},"Use ",(0,o.kt)("inlineCode",{parentName:"li"},"protoconf-terraform run")," to watch for config changes in protoconf and apply them immediatly.")),(0,o.kt)("h3",{id:"external-tools"},"External tools"),(0,o.kt)("p",null,"Use the ",(0,o.kt)("inlineCode",{parentName:"p"},".tf.json")," config suffix to create Terraform compatible files under ",(0,o.kt)("inlineCode",{parentName:"p"},"./outputs"),". These files can be used to either run locally on the developer's machine or to be picked up later by the developer's favourite Terraform management tool (recommended for infrastructure provisioning with long provisioning times like VPC, compute, clusters)."),(0,o.kt)("h3",{id:"watch-for-configs"},"Watch for Configs"),(0,o.kt)("p",null,"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"protoconf-terraform run"),": This command needs a ",(0,o.kt)("inlineCode",{parentName:"p"},"SubscriptionConfig")," for protoconf-terraform to know which configs to watch."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'load("//protoconf_terraform/config/v1/config.proto", "SubscriptionConfig")\n\ndef main():\n    return SubscriptionConfig(keys=[\n        "example/dog",\n        "example/cat",\n    ])\n')),(0,o.kt)("p",null,"This approach is recommended for short running provisioning such as Kubernetes resources, DNS updates etc. You can use this approach with the mutation API to create:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Continuous Deployment pipelines"),(0,o.kt)("li",{parentName:"ul"},"Ephemeral deployments (for development purposes)"),(0,o.kt)("li",{parentName:"ul"},"Canaries"),(0,o.kt)("li",{parentName:"ul"},"Automatic failovers")),(0,o.kt)("h4",{id:"docker-deployment"},"Docker Deployment"),(0,o.kt)("p",null,"Running ",(0,o.kt)("inlineCode",{parentName:"p"},"protoconf-terraform")," in a Docker container involves packaging the necessary files and running the container."),(0,o.kt)("p",null,"First, you'll need to create a ",(0,o.kt)("inlineCode",{parentName:"p"},"Dockerfile"),". Here's an example ",(0,o.kt)("inlineCode",{parentName:"p"},"Dockerfile")," for ",(0,o.kt)("inlineCode",{parentName:"p"},"protoconf-terraform"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-docker"},'FROM homebrew/brew AS installer\n\nRUN brew install protoconf/tap/protoconf-terraform hashicorp/tap/terraform\n\nFROM alpine\n# Add Maintainer Info\nLABEL maintainer="Your Name <your.email@example.com>"\n\n# Set the Current Working Directory inside the container\nWORKDIR /app\n\nCOPY --from=installer /home/linuxbrew/.linuxbrew/bin/terraform /usr/local/bin/terraform\nCOPY --from=installer /home/linuxbrew/.linuxbrew/bin/protoconf-terraform /usr/local/bin/protoconf-terraform\n\n# Install git.\n# Git is required for fetching the dependencies.\nRUN apk update && apk add --no-cache git\n\n# Copy proto files\nCOPY ./src/terraform /app/src/terraform\n\n# This container will be executable\nENTRYPOINT ["protoconf-terraform"]\n')),(0,o.kt)("p",null,"To build the Docker image, navigate to the directory containing your ",(0,o.kt)("inlineCode",{parentName:"p"},"Dockerfile")," and run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"docker build -t protoconf-terraform .\n")),(0,o.kt)("p",null,"After building the Docker image, you can run the ",(0,o.kt)("inlineCode",{parentName:"p"},"protoconf-terraform")," command within a Docker container using the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"docker run -it --rm protoconf-terraform COMMAND\n")),(0,o.kt)("p",null,"Replace ",(0,o.kt)("inlineCode",{parentName:"p"},"COMMAND")," with the command you want to run, such as ",(0,o.kt)("inlineCode",{parentName:"p"},"init"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"generate"),", or ",(0,o.kt)("inlineCode",{parentName:"p"},"run"),"."),(0,o.kt)("p",null,"Remember that any changes made within the Docker container won't persist after the container is stopped. If you want to persist data across Docker runs, consider using Docker volumes."))}m.isMDXComponent=!0}}]);