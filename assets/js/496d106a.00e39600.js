"use strict";(self.webpackChunkprotoconf=self.webpackChunkprotoconf||[]).push([[291],{8203:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var t=o(5893),r=o(3905);const i={sidebar_position:4},a="Generating YAML, JSON and TOML",c={id:"advanced-usage/output-formats",title:"Generating YAML, JSON and TOML",description:"Protoconf has built-in support for generating YAML, JSON, and TOML configurations. This allows you to use Protoconf in environments that expect configurations in these formats, and to take advantage of the different strengths of each format.",source:"@site/docs/advanced-usage/output-formats.mdx",sourceDirName:"advanced-usage",slug:"/advanced-usage/output-formats",permalink:"/docs/0.1.7/advanced-usage/output-formats",draft:!1,unlisted:!1,editUrl:"https://github.com/protoconf/protoconf/tree/main/website/protoconf/docs/advanced-usage/output-formats.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Pipelining",permalink:"/docs/0.1.7/advanced-usage/pipelining"},next:{title:"Protoconf Mutation Service",permalink:"/docs/0.1.7/advanced-usage/mutation-service/"}},s={},l=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Multiple Configurations",id:"multiple-configurations",level:2},{value:"Full Example",id:"full-example",level:3}];function f(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.ah)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"generating-yaml-json-and-toml",children:"Generating YAML, JSON and TOML"}),"\n",(0,t.jsx)(n.p,{children:"Protoconf has built-in support for generating YAML, JSON, and TOML configurations. This allows you to use Protoconf in environments that expect configurations in these formats, and to take advantage of the different strengths of each format."}),"\n",(0,t.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,t.jsxs)(n.p,{children:["If a configuration file's path ends with ",(0,t.jsx)(n.code,{children:".yaml"}),", ",(0,t.jsx)(n.code,{children:".yml"}),", ",(0,t.jsx)(n.code,{children:".json"}),", or ",(0,t.jsx)(n.code,{children:".toml"}),", Protoconf will automatically generate the configuration in the corresponding format. The generated file will be written to the appropriate path under ",(0,t.jsx)(n.code,{children:"./outputs"})," as well as to the ",(0,t.jsx)(n.code,{children:"./materialized_configs"})," directory."]}),"\n",(0,t.jsxs)(n.p,{children:["For example, if you have a configuration file at ",(0,t.jsx)(n.code,{children:"myproject/server_config.json.pconf"}),", Protoconf will generate a JSON configuration file at ",(0,t.jsx)(n.code,{children:"./outputs/myproject/server_config.json"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"multiple-configurations",children:"Multiple Configurations"}),"\n",(0,t.jsxs)(n.p,{children:["If you are using a ",(0,t.jsx)(n.code,{children:".mpconf"})," file to generate multiple configurations, you can specify the output format for each configuration by including the format extension in the key of the returned dictionary."]}),"\n",(0,t.jsxs)(n.p,{children:["For example, if you have a ",(0,t.jsx)(n.code,{children:".mpconf"})," file that returns ",(0,t.jsx)(n.code,{children:'{"server_config.yaml": ServerConfiguration}'}),", Protoconf will generate a YAML configuration file at ",(0,t.jsx)(n.code,{children:"./outputs/server_config.yaml"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"full-example",children:"Full Example"}),"\n",(0,t.jsxs)(n.p,{children:["Let's assume you have a ProtoBuf message ",(0,t.jsx)(n.code,{children:"ServerConfiguration"})," defined as below:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-protobuf",children:"message ServerConfiguration {\n  bool enable_debug = 1;\n  uint32 max_connections = 2;\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You can create a ",(0,t.jsx)(n.code,{children:".mpconf"})," file as below:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'load("//myproject/v1/server_config.proto", "ServerConfiguration")\n\ndef main():\n  config = ServerConfiguration()\n  config.enable_debug = True\n  config.max_connections = 1000\n\n  return {\n    "server_config.json": config,\n    "server_config.yaml": config,\n    "server_config.toml": config\n  }\n'})}),"\n",(0,t.jsxs)(n.p,{children:["By running ",(0,t.jsx)(n.code,{children:"protoconf compile ."})," on this ",(0,t.jsx)(n.code,{children:".mpconf"})," file, Protoconf will generate a JSON file at ",(0,t.jsx)(n.code,{children:"./outputs/server_config.json"}),", a YAML file at ",(0,t.jsx)(n.code,{children:"./outputs/server_config.yaml"}),", and a TOML file at ",(0,t.jsx)(n.code,{children:"./outputs/server_config.toml"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["This feature makes it easy to generate multiple configurations in different formats from a single ",(0,t.jsx)(n.code,{children:".mpconf"})," file, simplifying your configuration management process."]})]})}function u(e={}){const{wrapper:n}={...(0,r.ah)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(f,{...e})}):f(e)}},3905:(e,n,o)=>{o.d(n,{ah:()=>l});var t=o(7294);function r(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function i(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,t)}return o}function a(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?i(Object(o),!0).forEach((function(n){r(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function c(e,n){if(null==e)return{};var o,t,r=function(e,n){if(null==e)return{};var o,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)o=i[t],n.indexOf(o)>=0||(r[o]=e[o]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)o=i[t],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var s=t.createContext({}),l=function(e){var n=t.useContext(s),o=n;return e&&(o="function"==typeof e?e(n):a(a({},n),e)),o},f={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var o=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=l(o),p=r,g=d["".concat(s,".").concat(p)]||d[p]||f[p]||i;return o?t.createElement(g,a(a({ref:n},u),{},{components:o})):t.createElement(g,a({ref:n},u))}));u.displayName="MDXCreateElement"}}]);