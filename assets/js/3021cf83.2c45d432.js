"use strict";(self.webpackChunkprotoconf=self.webpackChunkprotoconf||[]).push([[2538],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),p=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=p(e.components);return o.createElement(c.Provider,{value:t},e.children)},s="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),s=p(n),d=r,g=s["".concat(c,".").concat(d)]||s[d]||f[d]||i;return n?o.createElement(g,a(a({ref:t},u),{},{components:n})):o.createElement(g,a({ref:t},u))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[s]="string"==typeof e?e:r,a[1]=l;for(var p=2;p<i;p++)a[p]=n[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2418:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>f,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var o=n(7462),r=(n(7294),n(3905));const i={id:"getting-started",title:"Getting Started",sidebar_position:2},a="Getting Started",l={unversionedId:"getting-started",id:"getting-started",title:"Getting Started",description:"This guide will walk you through the installation of protoconf, creating a basic configuration, and running the protoconf compiler to generate the final configuration.",source:"@site/docs/getting-started.mdx",sourceDirName:".",slug:"/getting-started",permalink:"/docs/getting-started",draft:!1,editUrl:"https://github.com/protoconf/protoconf/tree/main/website/protoconf/docs/getting-started.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"getting-started",title:"Getting Started",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/docs/intro"},next:{title:"Configuration Validation",permalink:"/docs/validation"}},c={},p=[{value:"Installation",id:"installation",level:2},{value:"Defining the Configuration Structure",id:"defining-the-configuration-structure",level:2},{value:"Writing the Configuration Logic",id:"writing-the-configuration-logic",level:2},{value:"Running the protoconf Compiler",id:"running-the-protoconf-compiler",level:2}],u={toc:p},s="wrapper";function f(e){let{components:t,...n}=e;return(0,r.kt)(s,(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"getting-started"},"Getting Started"),(0,r.kt)("p",null,"This guide will walk you through the installation of protoconf, creating a basic configuration, and running the protoconf compiler to generate the final configuration."),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,"protoconf can be installed via Homebrew on macOS:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"brew install protoconf/tap/protoconf\n")),(0,r.kt)("p",null,"For other platforms, download the latest release from the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/protoconf/protoconf"},"protoconf GitHub repository")," and add the binary to your ",(0,r.kt)("inlineCode",{parentName:"p"},"PATH"),"."),(0,r.kt)("h2",{id:"defining-the-configuration-structure"},"Defining the Configuration Structure"),(0,r.kt)("p",null,"First, you'll need to define your configuration structure using Protobuf. The Protobuf files should be stored under ",(0,r.kt)("inlineCode",{parentName:"p"},"./src/<projectname>/<version>/<filename>.proto"),". For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-protobuf",metastring:"title=./src/myproject/v1/server_config.proto",title:"./src/myproject/v1/server_config.proto"},'syntax = "proto3";\n\npackage myproject.v1;\n\nmessage ServerConfiguration {\n  bool is_debug = 1;\n  uint32 max_connections = 2;\n  float max_payload_size_mb = 3;\n  google.protobuf.Duration request_timeout = 4;\n}\n')),(0,r.kt)("p",null,"In this example, ",(0,r.kt)("inlineCode",{parentName:"p"},"ServerConfiguration")," is the configuration structure for a server. It includes fields for debug mode (",(0,r.kt)("inlineCode",{parentName:"p"},"is_debug"),"), maximum number of connections (",(0,r.kt)("inlineCode",{parentName:"p"},"max_connections"),"), maximum payload size (",(0,r.kt)("inlineCode",{parentName:"p"},"max_payload_size_mb"),"), and request timeout (",(0,r.kt)("inlineCode",{parentName:"p"},"request_timeout"),")."),(0,r.kt)("h2",{id:"writing-the-configuration-logic"},"Writing the Configuration Logic"),(0,r.kt)("p",null,"Next, you'll write the configuration logic in a Starlark file, which should use the ",(0,r.kt)("inlineCode",{parentName:"p"},".pconf")," extension and be stored under ",(0,r.kt)("inlineCode",{parentName:"p"},"./src/"),". For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:"title=./src/myproject/server_config.pconf",title:"./src/myproject/server_config.pconf"},'load("//myproject/v1/server_config.proto", "ServerConfiguration")\nload("//google/protobuf/duration.proto", "Duration")\n\ndef main(ctx):\n    return ServerConfiguration(\n        is_debug=True,\n        max_connections=1000,\n        max_payload_size_mb=64.0,\n        request_timeout=Duration(seconds=5),\n    )\n')),(0,r.kt)("p",null,"In this example, the ",(0,r.kt)("inlineCode",{parentName:"p"},"ServerConfiguration")," message from the Protobuf file is loaded, and then a new ",(0,r.kt)("inlineCode",{parentName:"p"},"ServerConfiguration")," object is created in the ",(0,r.kt)("inlineCode",{parentName:"p"},"main()")," function."),(0,r.kt)("h2",{id:"running-the-protoconf-compiler"},"Running the protoconf Compiler"),(0,r.kt)("p",null,"Finally, run the protoconf compiler to generate the final configuration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"protoconf compile .\n")),(0,r.kt)("p",null,"The compiled configuration will be stored in a JSON file under ",(0,r.kt)("inlineCode",{parentName:"p"},"./materialized_configs/<projectname>/<filename>.materialized_JSON"),". For example, ",(0,r.kt)("inlineCode",{parentName:"p"},"./materialized_configs/myproject/server_config.materialized_JSON"),"."),(0,r.kt)("p",null,"This JSON file contains the final, compiled configuration that your application can consume."),(0,r.kt)("p",null,"With this, you've created your first protoconf configuration! The next section will cover more advanced topics, such as configuration validation and how to consume configuration updates in different programming languages."))}f.isMDXComponent=!0}}]);