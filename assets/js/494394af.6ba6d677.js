"use strict";(self.webpackChunkprotoconf=self.webpackChunkprotoconf||[]).push([[6842],{6839:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>s,metadata:()=>i,toc:()=>u});var o=r(5893),t=r(3905);const s={title:"Employee Directory as Code"},a=void 0,i={id:"use-cases/employee-directory",title:"Employee Directory as Code",description:"Use Case: Centralized Employee Management",source:"@site/docs/use-cases/employee-directory.mdx",sourceDirName:"use-cases",slug:"/use-cases/employee-directory",permalink:"/docs/0.1.7/use-cases/employee-directory",draft:!1,unlisted:!1,editUrl:"https://github.com/protoconf/protoconf/tree/main/website/protoconf/docs/use-cases/employee-directory.mdx",tags:[],version:"current",frontMatter:{title:"Employee Directory as Code"},sidebar:"tutorialSidebar",previous:{title:"Use Cases",permalink:"/docs/0.1.7/category/use-cases"},next:{title:"Protoconf for Platform Engineering",permalink:"/docs/0.1.7/use-cases/platform-engineering"}},l={},u=[{value:"Use Case: Centralized Employee Management",id:"use-case-centralized-employee-management",level:2},{value:"Overview",id:"overview",level:3},{value:"Step 1: Define the Employee and Group Messages",id:"step-1-define-the-employee-and-group-messages",level:3},{value:"Step 2: Creating Employees and Groups Configuration",id:"step-2-creating-employees-and-groups-configuration",level:3},{value:"Step 3: Deploy and Use the Employee and Groups Directory",id:"step-3-deploy-and-use-the-employee-and-groups-directory",level:3},{value:"Step 4: Manage Access Control",id:"step-4-manage-access-control",level:3}];function p(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.ah)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"use-case-centralized-employee-management",children:"Use Case: Centralized Employee Management"}),"\n",(0,o.jsx)(n.h3,{id:"overview",children:"Overview"}),"\n",(0,o.jsx)(n.p,{children:"In this use case, we'll show how to use Protoconf to automate employee onboarding and offboarding processes, manage access control, and maintain a clear and accurate record of employee data."}),"\n",(0,o.jsx)(n.h3,{id:"step-1-define-the-employee-and-group-messages",children:"Step 1: Define the Employee and Group Messages"}),"\n",(0,o.jsxs)(n.p,{children:["First, we need to define our ",(0,o.jsx)(n.code,{children:"Employee"})," and ",(0,o.jsx)(n.code,{children:"Group"})," protobuf messages:"]}),"\n",(0,o.jsxs)(n.p,{children:["For ",(0,o.jsx)(n.code,{children:"Employee"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-protobuf",metastring:"title=./src/directory/employee/v1/employee.proto",children:'syntax = "proto3";\npackage directory.employee.v1;\n\nmessage Employee {\n  uint64 id = 1;\n  string unix_name = 2;\n  string first_name = 3;\n  string last_name = 4;\n  PhoneNumber personal_phone_number = 5;\n  repeated PhoneNumber additional_phone_numbers = 6;\n  string private_email = 7;\n  bool active_employee = 8;\n\n  repeated string ssh_keys = 10;\n  string github_user = 11;\n\n  string title = 50;\n  string biography = 51;\n\n  message PhoneNumber {\n    uint32 country_code = 1;\n    uint64 number = 2;\n    uint32 prefix = 3;\n  }\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"We can also add validators to our Employee:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",metastring:"title=./src/directory/employee/v1/employee.proto-validator",children:'"""\nValidates employee\n"""\nload("employee.proto", "Employee")\n\n\ndef validate_employee(e):\n    if e.id < 1:\n        fail("Employee.id must be greater than 0")\n\n    if len(e.unix_name) <= 2:\n        fail("unix_name length must be at least 2 chars, got: %s" % e.unix_name)\n\nadd_validator(Employee, validate_employee)\n'})}),"\n",(0,o.jsxs)(n.p,{children:["For ",(0,o.jsx)(n.code,{children:"Group"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-protobuf",children:'syntax = "proto3";\npackage directory.groups.v1;\n\nimport "directory/employee/v1/employee.proto";\n\nmessage Group {\n    string name = 1;\n    string oncall = 2;\n    string slack_channel = 3;\n    repeated directory.employee.v1.Employee members = 4;\n    repeated Group subgroups = 5;\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"step-2-creating-employees-and-groups-configuration",children:"Step 2: Creating Employees and Groups Configuration"}),"\n",(0,o.jsx)(n.p,{children:"Create a Protoconf configuration file that will contain the list of Employee and Group messages."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",metastring:"title=./src/directory/directory.pinc",children:'load("//directory/employee/v1/employee.proto", "Employee")\nload("//directory/groups/v1/groups.proto", "Group")\n\nemployees = [\n    # Add Employee objects here\n]\n\ngroups = [\n    # Add Group objects here\n]\n\nALL_GROUPS = Group(subgroups=groups)\n\n# Helpers:\ndef get_employees_for_group(group, inactive=False):\n    members = set([m for m in group.members if m.active_employee or inactive])\n    for g in group.subgroups:\n        members = members.union(get_employees_for_group(g, inactive))\n    return members\n\n\ndef get_all_employees(inactive=False):\n    return get_employees_for_group(ALL_GROUPS, inactive)\n\n\ndef get_groups_for_employee(e, group=ALL_GROUPS):\n    groups = set([g for g in [group] if e in set(g.members)])\n    for gg in group.subgroups:\n        groups = groups.union(get_groups_for_employee(e, gg))\n    return groups\n\ndef walk_groups(func, group=ALL_GROUPS, visited=set()):\n    func(group, visited)\n    visited=visited.union([group])\n    for g in group.subgroups:\n        walk_groups(func, g, visited)\n'})}),"\n",(0,o.jsx)(n.p,{children:"In this file, you can specify details about each employee and the groups they belong to. Ensure that each employee has a unique id and unix_name to avoid duplications."}),"\n",(0,o.jsx)(n.h3,{id:"step-3-deploy-and-use-the-employee-and-groups-directory",children:"Step 3: Deploy and Use the Employee and Groups Directory"}),"\n",(0,o.jsxs)(n.p,{children:["Deploy the employee and groups configuration using ",(0,o.jsx)(n.code,{children:"protoconf deploy"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"The deployed configuration can be integrated with various platforms and tools, such as:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"GitHub:"})," Each employee's GitHub username can be automatically added to the company's GitHub organization using Terraform's GitHub provider. The ",(0,o.jsx)(n.code,{children:"ssh_keys"})," field can be used to add the employee's SSH keys to their GitHub profile."]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'load("//terraform/v1/util.pinc", "util")\nload("//terraform/github/provider/v4/github.proto", "Github")\nload("//terraform/github/resources/v4/membership.proto", "GithubMembership")\nload("//terraform/github/resources/v4/team.proto", "GithubTeam", "GithubTeamMembership")\nload("//directory/directory.pinc", "get_all_employees", "walk_groups)\n\ndef github_teams():\n    resources=[]\n    def run(group, visited):\n        return if group in visited\n        team=util.Resource(\n            group.name, GithubTeam(name=group.name),\n            lambda team: (util.Group(\n                *[util.Resource("%s-%s" % (group.name, member.name),\n                    GithubTeamMembership(team_id=team.id, username=employee.github_user)\n                ) for member in get_employees_for_group(group)]\n            ))\n        )\n        resources.append(team)\n    walk_groups(run)\n    return resources\n\ntf = util.Terraform(\n    util.Provider(Github(\n        organization="your-organization",\n        token="your-token", # Better to get from terraform variable or GITHUB_TOKEN environment variable\n    ),\n    *[util.Resource(\n        employee.unix_name, GithubMembership(username=employee.github_user))\n        for employee in get_all_employees()\n    ],\n    *github_teams()\n)\n'})}),"\n",(0,o.jsxs)(n.ol,{start:"2",children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"AD/GSuite/Okta:"})," An account can be created for each employee, using their Unix name as the username. If the ",(0,o.jsx)(n.code,{children:"active_employee"})," field is set to ",(0,o.jsx)(n.code,{children:"false"}),", the account can be automatically disabled. For GSuite, you can use the ",(0,o.jsx)(n.a,{href:"https://registry.terraform.io/providers/DeviaVir/gsuite/latest/docs",children:"GSuite Terraform provider"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'"""\nManages users and groups in the gsuite\n"""\nload("//terraform/v1/terraform.proto", "Terraform")\nload(\n    "//terraform/gsuite/resources/v0/domain.proto",\n    "GsuiteDomain",\n)\nload(\n    "//terraform/gsuite/resources/v0/group.proto",\n    "GsuiteGroup",\n    "GsuiteGroupMember",\n)\nload(\n    "//terraform/gsuite/resources/v0/user.proto",\n    "GsuiteUser",\n)\nload("//terraform/gsuite/provider/v0/gsuite.proto", "Gsuite")\nload("//terraform/v1/util.pinc", "util")\n\nMASTER_DOMAIN = "example.com"\nADDITIONAL_DOMAINS = ["example.org", "example.net"]\n\ntf = util.Terraform(\n    util.Provider(Gsuite(\n        oauth_scopes=[\n            "https://www.googleapis.com/auth/admin.directory.group",\n            "https://www.googleapis.com/auth/apps.groups.settings",\n            "https://www.googleapis.com/auth/admin.directory.user",\n            "https://www.googleapis.com/auth/admin.directory.userschema",\n            "https://www.googleapis.com/auth/admin.directory.domain",\n        ],\n        impersonated_user_email="admin@%s" % MASTER_DOMAIN,\n    )),\n    util.Resource("domain", GSuiteDomain(domain_name=MASTER_DOMAIN)),s\n    *[util.Resource(employee.unix_name, GsuiteUser(\n            primary_email="%s@%s" % (employee.unix_name, MASTER_DOMAIN),\n            aliases=["%s@%s" % (employee.unix_name, domain) for domain in ADDITIONAL_DOMAINS],\n            name={"family_name": employee.last_name, "given_name": employee.first_name},\n            recovery_email=employee.private_email,\n            recovery_phone="+%d%d" % (\n                employee.personal_phone_number.country_code,\n                employee.personal_phone_number.number\n            ),\n            posix_accounts=[\n                GsuiteUser.PosixAccounts(\n                    home_directory="/home/%s" % (employee.unix_name),\n                    primary=True,\n                    gid=employee.id,\n                    uid=employee.id,\n                    shell="/bin/bash",\n                    system_id="uid",\n                    username=employee.unix_name,\n                )\n            ],\n            external_ids=[GsuiteUser.ExternalIds(type="organization", value=str(employee.id))],\n            update_existing=True,\n        )) for employee in get_all_employees()\n    ]\n)\n'})}),"\n",(0,o.jsx)(n.h3,{id:"step-4-manage-access-control",children:"Step 4: Manage Access Control"}),"\n",(0,o.jsx)(n.p,{children:"Once the employees have been added to these platforms, you can use Protoconf to manage their access to various resources."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'def github_teams():\n    resources=[]\n    def run(group, visited):\n        return if group in visited\n        team=util.Resource(\n            group.name, GithubTeam(name=group.name),\n            lambda team: (util.Group(\n                *[util.Resource("%s-%s" % (group.name, member.name),\n                    GithubTeamMembership(team_id=team.id, username=employee.github_user)\n                ) for member in get_employees_for_group(group)]\n            ))\n        )\n        resources.append(team)\n    walk_groups(run)\n    return resources\n\ndef gsuite_groups():\n    resources=[]\n    def run(group, visited):\n        return if group in visited\n        team=util.Resource(group.name, GsuiteGroup(\n                email="%s@%s" % (group.name.lower(), MASTER_DOMAIN),\n                name=group.name,\n            ),\n            lambda team: (util.Group(\n                *[util.Resource("%s-%s" % (group.name, member.name),\n                    GsuiteGroupMember(\n                        group=team.email,\n                        email="%s@%s", (member.unix_name, MASTER_DOMAIN),\n                        role="MEMBER",\n                ) for member in get_employees_for_group(group)]\n            ))\n        )\n        resources.append(team)\n    walk_groups(run)\n    return resources\n'})}),"\n",(0,o.jsx)(n.p,{children:'In this example, we are adding each member of the group to the corresponding team on GitHub. The on-call member is given the role of "maintainer".'}),"\n",(0,o.jsx)(n.p,{children:"By using Protoconf to manage your employee directory, you will gain the following advantages:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Easier onboarding and offboarding:"})," Once an employee is added to or removed from the Protoconf configuration, their access to all associated platforms is automatically updated."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Access clarity:"})," It's easy to see who has access to what, since all access data is contained in the Protoconf configuration."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Easy access management:"})," Granting and revoking access is as simple as updating the Protoconf configuration."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Version control:"})," All changes to the configuration are tracked in version control, providing an audit trail for compliance and accountability purposes."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Please ensure to handle sensitive information such as passwords, tokens, and keys securely when using Protoconf and Terraform."}),"\n",(0,o.jsx)(n.p,{children:"In this guide, we've only scratched the surface of what's possible with Protoconf. With its ability to integrate with a wide range of tools and platforms, Protoconf can be a powerful addition to your organization's infrastructure."})]})}function c(e={}){const{wrapper:n}={...(0,t.ah)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},3905:(e,n,r)=>{r.d(n,{ah:()=>u});var o=r(7294);function t(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function s(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,o)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?s(Object(r),!0).forEach((function(n){t(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,o,t=function(e,n){if(null==e)return{};var r,o,t={},s=Object.keys(e);for(o=0;o<s.length;o++)r=s[o],n.indexOf(r)>=0||(t[r]=e[r]);return t}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)r=s[o],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var l=o.createContext({}),u=function(e){var n=o.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},c=o.forwardRef((function(e,n){var r=e.components,t=e.mdxType,s=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=u(r),d=t,g=m["".concat(l,".").concat(d)]||m[d]||p[d]||s;return r?o.createElement(g,a(a({ref:n},c),{},{components:r})):o.createElement(g,a({ref:n},c))}));c.displayName="MDXCreateElement"}}]);