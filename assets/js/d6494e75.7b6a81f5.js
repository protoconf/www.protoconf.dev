"use strict";(self.webpackChunkprotoconf=self.webpackChunkprotoconf||[]).push([[6039],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>d});var i=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=i.createContext({}),c=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},l=function(e){var n=c(e.components);return i.createElement(s.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},f=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),u=c(t),f=o,d=u["".concat(s,".").concat(f)]||u[f]||m[f]||r;return t?i.createElement(d,a(a({ref:n},l),{},{components:t})):i.createElement(d,a({ref:n},l))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,a=new Array(r);a[0]=f;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p[u]="string"==typeof e?e:o,a[1]=p;for(var c=2;c<r;c++)a[c]=t[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}f.displayName="MDXCreateElement"},5882:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>p,toc:()=>c});var i=t(7462),o=(t(7294),t(3905));const r={title:"Pipelining",sidebar_position:3},a=void 0,p={unversionedId:"advanced-usage/pipelining",id:"advanced-usage/pipelining",title:"Pipelining",description:"Implementing Config Manipulation Pipelining",source:"@site/docs/advanced-usage/pipelining.mdx",sourceDirName:"advanced-usage",slug:"/advanced-usage/pipelining",permalink:"/docs/advanced-usage/pipelining",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/advanced-usage/pipelining.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Pipelining",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Multiple Outputs",permalink:"/docs/advanced-usage/multiple-outputs"},next:{title:"Generating YAML, JSON and TOML",permalink:"/docs/advanced-usage/output-formats"}},s={},c=[{value:"Implementing Config Manipulation Pipelining",id:"implementing-config-manipulation-pipelining",level:2}],l={toc:c},u="wrapper";function m(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,i.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"implementing-config-manipulation-pipelining"},"Implementing Config Manipulation Pipelining"),(0,o.kt)("p",null,"In more advanced scenarios, you may want to implement a pipeline for config manipulation, where a series of transformations are applied to a config message in a specific order. This can be useful when you have complex configuration needs that require a series of operations to be performed on a configuration."),(0,o.kt)("p",null,"The following is an example of how you can implement config manipulation pipelining in protoconf:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title=./src/myproject/helpers.pinc",title:"./src/myproject/helpers.pinc"},'load("//myproject/v1/server_config.proto", "ServerConfiguration")\n\ndef Chain(msg, *hooks):\n    queue = list(hooks)\n    queue.append(lambda m, _: m)\n\n    def run_next(c):\n        next = queue.pop(0)\n        return next(c, run_next)\n\n    first = queue.pop(0)\n    return first(msg, run_next)\n\ndef ServerConfigApi(*hooks):\n    return Chain(ServerConfiguration(), *hooks)\n\ndef SetMaxConnections(num):\n    def do(msg, next):\n        msg.max_connections=num\n        return next(msg)\n    return do\n\napi = struct(\n    ServerConfigApi=ServerConfigApi,\n    SetMaxConnections=SetMaxConnections,\n)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title=./src/myproject/server_config.pconf",title:"./src/myproject/server_config.pconf"},'load("//myproject/helpers.pinc", "api")\n\ndef main():\n    return api.ServerConfigApi(\n        api.SetMaxConnections(1000)\n    )\n')),(0,o.kt)("p",null,"In this example, the ",(0,o.kt)("inlineCode",{parentName:"p"},"helpers.pinc")," file defines a ",(0,o.kt)("inlineCode",{parentName:"p"},"Chain"),' function that accepts a configuration message and a series of hooks. Each hook is a function that accepts a configuration message and a "next" function, performs some operation on the message, and then calls the next function with the modified message.'),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"ServerConfigApi")," function creates a chain of hooks starting with a new ",(0,o.kt)("inlineCode",{parentName:"p"},"ServerConfiguration")," message, and the ",(0,o.kt)("inlineCode",{parentName:"p"},"SetMaxConnections")," function is a hook that sets the ",(0,o.kt)("inlineCode",{parentName:"p"},"max_connections")," field of a ",(0,o.kt)("inlineCode",{parentName:"p"},"ServerConfiguration")," message."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"api")," struct packages these functions together so they can be loaded into other files."),(0,o.kt)("p",null,"Then, in ",(0,o.kt)("inlineCode",{parentName:"p"},"server_config.pconf"),", the ",(0,o.kt)("inlineCode",{parentName:"p"},"api")," struct is loaded and used to create a ",(0,o.kt)("inlineCode",{parentName:"p"},"ServerConfiguration")," with ",(0,o.kt)("inlineCode",{parentName:"p"},"max_connections")," set to 1000."),(0,o.kt)("p",null,"This approach allows you to compose complex configurations in a clean, structured way, enhancing readability and maintainability."),(0,o.kt)("p",null,'This technique of chaining operations is sometimes referred to as "function chaining" or "pipeline processing", and is a common pattern in functional programming. It can be especially helpful when dealing with complex or multi-step transformations.'))}m.isMDXComponent=!0}}]);